// React Imports
import { useEffect, useRef } from 'react'

// MUI Imports
import Typography from '@mui/material/Typography'
import Accordion from '@mui/material/Accordion'
import AccordionSummary from '@mui/material/AccordionSummary'
import AccordionDetails from '@mui/material/AccordionDetails'
import Grid from '@mui/material/Grid'
import Chip from '@mui/material/Chip'
import Box from '@mui/material/Box'
import Container from '@mui/material/Container'



// Styles Imports
import styles from './styles.module.css'

const FaqsData = [
  {
    id: 'panel1',
    question: 'How It Works?',
    answer:
      "We've made the process as simple as possible: 1) Create Your Account & Profile: Register in seconds and tell our AI your goals. 2) Choose Your Token Package: Top up your balance with tokens that never expire. 3) Get Your AI-Generated Plan: Use tokens to order any service and get your plan instantly."
  },
  {
    id: 'panel2',
    question: 'How are the meal plans created?',
    active: true,
    answer:
      'Our plans are generated by artificial intelligence based on the individual data you provide. The system precisely calculates your optimal daily calorie intake for healthy results.'
  },
  {
    id: 'panel3',
    question: 'What are tokens and do they expire?',
    answer:
      'Tokens are the internal currency of Nutrich.io. You purchase token packages to top up your balance, and then use those tokens to buy any service you want. Your tokens never expire.'
  },
  {
    id: 'panel4',
    question: 'Can I use this service with my family?',
    answer:
      'Yes! Our Family and Couples plan is a flagship service that allows you to generate a shared meal plan for multiple people with different goals, tastes, and even dietary restrictions.'
  },
  {
    id: 'panel5',
    question: 'Where can I find my purchased plans?',
    answer:
      'All purchased meal plans, programs, and recipes are automatically saved and always available for you in the "Result Center" of your personal account.'
  }
]

const FAQSection = ({ mode }) => {
  // Refs
  const skipIntersection = useRef(true)
  const ref = useRef(null)

 

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (skipIntersection.current) {
          skipIntersection.current = false
          return
        }

        updateIntersections({ [entry.target.id]: entry.isIntersecting })
      },
      { threshold: 0.35 }
    )

    ref.current && observer.observe(ref.current)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  return (
    <Box
      id='landingFAQ'
      ref={ref}
      sx={{
        py: 10,
      }}
    >
      <Container maxWidth='lg'>
        <div className='flex flex-col gap-16'>
          <div className='flex flex-col gap-y-4 items-center justify-center'>
            <Chip size='small' variant='tonal' color='primary' label='FAQ' />
            <div className='flex flex-col items-center gap-y-1 justify-center flex-wrap'>
              <div className='flex items-center gap-x-2'>
                <Typography color='text.primary' variant='h4'>
                  Frequently asked
                  <span className='relative z-[1] font-extrabold'>
                    <img
                      src='/images/front-pages/landing-page/bg-shape.png'
                      alt='bg-shape'
                      className='absolute block-end-0 z-[1] bs-[40%] is-[132%] -inline-start-[8%] block-start-[17px]'
                    />{' '}
                    questions
                  </span>
                </Typography>
              </div>
              <Typography className='text-center'>
                Browse through these FAQs to find answers to commonly asked questions.
              </Typography>
            </div>
          </div>
          <div>
            <Grid container spacing={6}>
             
              <Grid item xs={24} >
                <div>
                  {FaqsData.map((data, index) => {
                    return (
                      <Accordion key={index} defaultExpanded={data.active}>
                        <AccordionSummary
                          aria-controls={data.id + '-content'}
                          id={data.id + '-header'}
                          className='font-medium'
                          color='text.primary'
                        >
                          {data.question}
                        </AccordionSummary>
                        <AccordionDetails className='text-textSecondary'>{data.answer}</AccordionDetails>
                      </Accordion>
                    )
                  })}
                </div>
              </Grid>
            </Grid>
          </div>
        </div>
      </Container>
    </Box>
  )
}

export default FAQSection
